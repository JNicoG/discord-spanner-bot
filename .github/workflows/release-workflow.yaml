name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with release token
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: maven

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Extract current version
        id: extract_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Remove -SNAPSHOT if present
          RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
          echo "Release version: $RELEASE_VERSION"
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          
          # Extract artifactId
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          echo "Artifact ID: $ARTIFACT_ID"
          echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT

      - name: Update to release version and fix repository URLs
        run: |
          mvn versions:set -DnewVersion=${{ steps.extract_version.outputs.release_version }} -DgenerateBackupPoms=false
          
          # Replace repository placeholders if they exist
          if grep -q '\${github.repository}' pom.xml; then
            sed -i "s|\${github.repository}|${{ github.repository }}|g" pom.xml
          fi
          
      - name: Commit release version
        run: |
          # Set remote URL with token for authentication
          git remote set-url origin https://x-access-token:${{ secrets.RELEASE_TOKEN }}@github.com/${{ github.repository }}.git
          
          git add pom.xml
          git commit -m "Release version ${{ steps.extract_version.outputs.release_version }}"
          git tag ${{ steps.extract_version.outputs.artifact_id }}-${{ steps.extract_version.outputs.release_version }}
          git push origin ${{ steps.extract_version.outputs.artifact_id }}-${{ steps.extract_version.outputs.release_version }}
          git push

      - name: Build with Maven
        run: mvn -B package

      - name: Deploy to GitHub Packages
        run: mvn deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate next development version
        id: next_version
        run: |
          # Get the components of the version
          IFS='.' read -r -a VERSION_PARTS <<< "${{ steps.extract_version.outputs.release_version }}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment based on release type
          if [[ "${{ github.event.inputs.releaseType }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ github.event.inputs.releaseType }}" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}-SNAPSHOT"
          echo "Next development version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Update to next development version
        run: |
          mvn versions:set -DnewVersion=${{ steps.next_version.outputs.next_version }} -DgenerateBackupPoms=false

      - name: Commit next development version
        run: |
          git add pom.xml
          git commit -m "Prepare for next development iteration ${{ steps.next_version.outputs.next_version }}"
          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_version.outputs.artifact_id }}-${{ steps.extract_version.outputs.release_version }}
          name: Release ${{ steps.extract_version.outputs.release_version }}
          draft: false
          prerelease: false
          files: target/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}